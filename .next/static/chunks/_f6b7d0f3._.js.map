{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/HTML%2C%20CSS%2C%20JS/Projects/Nextjs%20Project%201%20-%20GetMeAChai/get-me-a-chai/actions/useractions.js"],"sourcesContent":["\"use server\"\r\nimport Razorpay from \"razorpay\"\r\nimport Payment from \"@/models/Payment\"\r\nimport connectDB from \"@/db/connectDb\"\r\nimport User from \"@/models/User\"\r\n\r\nexport const initiatePayment = async (amount, to_username, paymentform) => {\r\n    await connectDB()\r\n    const instance = new Razorpay({\r\n        key_id: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID,\r\n        key_secret: process.env.RAZORPAY_SERET_KEY,\r\n    })\r\n\r\n    let options = {\r\n        amount: Number.parseInt(amount),\r\n        currency: \"INR\",\r\n    }\r\n\r\n    let order = await instance.orders.create(options)\r\n    await Payment.create({\r\n        amount: amount / 100,\r\n        order_id: order.id,\r\n        to_user: to_username,\r\n        name: paymentform.name,\r\n        message: paymentform.message,\r\n    })\r\n    return order\r\n}\r\n\r\nexport const fetchuser = async (username) => {\r\n    await connectDB()\r\n    const user = await User.findOne({ username: username }).lean()\r\n    if (!user) return null\r\n    return {\r\n        ...user,\r\n        _id: user._id.toString(),\r\n        createdAt: user.createdAt?.toISOString(),\r\n        updatedAt: user.updatedAt?.toISOString()\r\n    }\r\n}\r\n\r\nexport const fetchPayments = async (username) => {\r\n    await connectDB()\r\n    let payments = await Payment.find({ to_user: username, done: true }).sort({ amount: -1 }).lean()\r\n    return payments.map(p => ({\r\n        ...p,\r\n        _id: p._id.toString(),\r\n        createdAt: p.createdAt?.toISOString(),\r\n        updatedAt: p.updatedAt?.toISOString()\r\n    }))\r\n}\r\n\r\nexport const updateProfile = async (oldusername, data) => {\r\n    await connectDB()\r\n    let ndata = Object.fromEntries(data)\r\n    // Check if the new username already exists\r\n    if (oldusername !== ndata.username) {\r\n        let u = await User.findOne({ username: ndataoldusername })\r\n        if (u) {\r\n            throw new Error(\"Username already exists\")\r\n        }\r\n    }\r\n    // Dont update the email\r\n    await User.updateOne({email: ndata.email }, ndata)\r\n} "],"names":[],"mappings":";;;;;;IAoDa,gBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/HTML%2C%20CSS%2C%20JS/Projects/Nextjs%20Project%201%20-%20GetMeAChai/get-me-a-chai/actions/useractions.js"],"sourcesContent":["\"use server\"\r\nimport Razorpay from \"razorpay\"\r\nimport Payment from \"@/models/Payment\"\r\nimport connectDB from \"@/db/connectDb\"\r\nimport User from \"@/models/User\"\r\n\r\nexport const initiatePayment = async (amount, to_username, paymentform) => {\r\n    await connectDB()\r\n    const instance = new Razorpay({\r\n        key_id: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID,\r\n        key_secret: process.env.RAZORPAY_SERET_KEY,\r\n    })\r\n\r\n    let options = {\r\n        amount: Number.parseInt(amount),\r\n        currency: \"INR\",\r\n    }\r\n\r\n    let order = await instance.orders.create(options)\r\n    await Payment.create({\r\n        amount: amount / 100,\r\n        order_id: order.id,\r\n        to_user: to_username,\r\n        name: paymentform.name,\r\n        message: paymentform.message,\r\n    })\r\n    return order\r\n}\r\n\r\nexport const fetchuser = async (username) => {\r\n    await connectDB()\r\n    const user = await User.findOne({ username: username }).lean()\r\n    if (!user) return null\r\n    return {\r\n        ...user,\r\n        _id: user._id.toString(),\r\n        createdAt: user.createdAt?.toISOString(),\r\n        updatedAt: user.updatedAt?.toISOString()\r\n    }\r\n}\r\n\r\nexport const fetchPayments = async (username) => {\r\n    await connectDB()\r\n    let payments = await Payment.find({ to_user: username, done: true }).sort({ amount: -1 }).lean()\r\n    return payments.map(p => ({\r\n        ...p,\r\n        _id: p._id.toString(),\r\n        createdAt: p.createdAt?.toISOString(),\r\n        updatedAt: p.updatedAt?.toISOString()\r\n    }))\r\n}\r\n\r\nexport const updateProfile = async (oldusername, data) => {\r\n    await connectDB()\r\n    let ndata = Object.fromEntries(data)\r\n    // Check if the new username already exists\r\n    if (oldusername !== ndata.username) {\r\n        let u = await User.findOne({ username: ndataoldusername })\r\n        if (u) {\r\n            throw new Error(\"Username already exists\")\r\n        }\r\n    }\r\n    // Dont update the email\r\n    await User.updateOne({email: ndata.email }, ndata)\r\n} "],"names":[],"mappings":";;;;;;IA6Ba,YAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/HTML%2C%20CSS%2C%20JS/Projects/Nextjs%20Project%201%20-%20GetMeAChai/get-me-a-chai/app/dashboard/page.js"],"sourcesContent":["\"use client\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { useSession } from \"next-auth/react\"\r\nimport React from 'react'\r\nimport { updateProfile, fetchuser } from \"@/actions/useractions\"\r\n\r\nconst Dashboard = () => {\r\n  const { data: session, update } = useSession()\r\n  const [form, setform] = useState({})\r\n\r\n  useEffect(() => {\r\n    if (session && session.user?.name) {\r\n      getData()\r\n    }\r\n  }, [session])\r\n\r\n  const handleChange = (e) => {\r\n    setform({ ...form, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const getData = async () => {\r\n    let u = await fetchuser(session.user.name)\r\n    setform(u)\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    update()\r\n    let a = await updateProfile(session.user.name, e)\r\n    alert(\"Profile updated successfully\")\r\n  }\r\n\r\n  return (\r\n    <div className='flex flex-col justify-center items-center mx-auto gap-1'>\r\n      <h2 className='text-2xl my-7 font-bold'>Wellcome to your Dashboard</h2>\r\n      <form className=\"flex flex-col gap-1 pt-1 w-[40%]\" onSubmit={handleSubmit}>\r\n        <label className=\"flex flex-col text-sm font-medium text-gray-200\">\r\n          Name\r\n          <input value={form.name ? form.name : \"\"} onChange={handleChange} name=\"name\" id=\"name\" type=\"text\" className='bg-slate-800 p-2 rounded-lg mt-1' />\r\n        </label>\r\n        <label className=\"flex flex-col text-sm font-medium text-gray-200\">\r\n          Email\r\n          <input value={form.email ? form.email : \"\"} onChange={handleChange} name=\"email\" id=\"email\" type=\"text\" className='bg-slate-800 p-2 rounded-lg mt-1' />\r\n        </label>\r\n        <label className=\"flex flex-col text-sm font-medium text-gray-200\">\r\n          Username\r\n          <input value={form.username ? form.username : \"\"} onChange={handleChange} name=\"username\" id=\"username\" type=\"text\" className='bg-slate-800 p-2 rounded-lg mt-1' />\r\n        </label>\r\n        <label className=\"flex flex-col text-sm font-medium text-gray-200\">\r\n          Profile Picture URL\r\n          <input value={form.profile ? form.profile : \"\"} onChange={handleChange} name=\"profile\" id=\"profile\" type=\"text\" className='bg-slate-800 p-2 rounded-lg mt-1' />\r\n        </label>\r\n        <label className=\"flex flex-col text-sm font-medium text-gray-200\">\r\n          Cover Picture URL\r\n          <input value={form.cover ? form.cover : \"\"} onChange={handleChange} name=\"cover\" id=\"cover\" type=\"text\" className='bg-slate-800 p-2 rounded-lg mt-1' />\r\n        </label>\r\n        <label className=\"flex flex-col text-sm font-medium text-gray-200\">\r\n          Razorpay Key ID\r\n          <input value={form.razorpayid ? form.razorpayid : \"\"} onChange={handleChange} name=\"razorpayid\" id=\"razorpayid\" type=\"text\" className='bg-slate-800 p-2 rounded-lg mt-1' />\r\n        </label>\r\n        <label className=\"flex flex-col text-sm font-medium text-gray-200\">\r\n          Razorpay Secret Key\r\n          <input value={form.secret ? form.secret : \"\"} onChange={handleChange} name=\"secret\" id=\"secret\" type=\"text\" className='bg-slate-800 p-2 rounded-lg mt-1' />\r\n        </label>\r\n        <div className=\"flex gap-2 pt-2\">\r\n          <button className=\"bg-blue-700 w-full cursor-pointer text-white rounded py-2 px-3 hover:bg-blue-600 transition\">\r\n            Save\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n"],"names":[],"mappings":";;;;AACA;AACA;AAEA;AAAA;;;AAJA;;;;;AAMA,MAAM,YAAY;;IAChB,MAAM,EAAE,MAAM,OAAO,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,iJAAA,CAAA,aAAU,AAAD;IAC3C,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IAElC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR,IAAI,WAAW,QAAQ,IAAI,EAAE,MAAM;gBACjC;YACF;QACF;8BAAG;QAAC;KAAQ;IAEZ,MAAM,eAAe,CAAC;QACpB,QAAQ;YAAE,GAAG,IAAI;YAAE,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,KAAK;QAAC;IACrD;IAEA,MAAM,UAAU;QACd,IAAI,IAAI,MAAM,CAAA,GAAA,kJAAA,CAAA,YAAS,AAAD,EAAE,QAAQ,IAAI,CAAC,IAAI;QACzC,QAAQ;IACV;IAEA,MAAM,eAAe,OAAO;QAC1B;QACA,IAAI,IAAI,MAAM,CAAA,GAAA,kJAAA,CAAA,gBAAa,AAAD,EAAE,QAAQ,IAAI,CAAC,IAAI,EAAE;QAC/C,MAAM;IACR;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,6LAAC;gBAAK,WAAU;gBAAmC,UAAU;;kCAC3D,6LAAC;wBAAM,WAAU;;4BAAkD;0CAEjE,6LAAC;gCAAM,OAAO,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG;gCAAI,UAAU;gCAAc,MAAK;gCAAO,IAAG;gCAAO,MAAK;gCAAO,WAAU;;;;;;;;;;;;kCAEhH,6LAAC;wBAAM,WAAU;;4BAAkD;0CAEjE,6LAAC;gCAAM,OAAO,KAAK,KAAK,GAAG,KAAK,KAAK,GAAG;gCAAI,UAAU;gCAAc,MAAK;gCAAQ,IAAG;gCAAQ,MAAK;gCAAO,WAAU;;;;;;;;;;;;kCAEpH,6LAAC;wBAAM,WAAU;;4BAAkD;0CAEjE,6LAAC;gCAAM,OAAO,KAAK,QAAQ,GAAG,KAAK,QAAQ,GAAG;gCAAI,UAAU;gCAAc,MAAK;gCAAW,IAAG;gCAAW,MAAK;gCAAO,WAAU;;;;;;;;;;;;kCAEhI,6LAAC;wBAAM,WAAU;;4BAAkD;0CAEjE,6LAAC;gCAAM,OAAO,KAAK,OAAO,GAAG,KAAK,OAAO,GAAG;gCAAI,UAAU;gCAAc,MAAK;gCAAU,IAAG;gCAAU,MAAK;gCAAO,WAAU;;;;;;;;;;;;kCAE5H,6LAAC;wBAAM,WAAU;;4BAAkD;0CAEjE,6LAAC;gCAAM,OAAO,KAAK,KAAK,GAAG,KAAK,KAAK,GAAG;gCAAI,UAAU;gCAAc,MAAK;gCAAQ,IAAG;gCAAQ,MAAK;gCAAO,WAAU;;;;;;;;;;;;kCAEpH,6LAAC;wBAAM,WAAU;;4BAAkD;0CAEjE,6LAAC;gCAAM,OAAO,KAAK,UAAU,GAAG,KAAK,UAAU,GAAG;gCAAI,UAAU;gCAAc,MAAK;gCAAa,IAAG;gCAAa,MAAK;gCAAO,WAAU;;;;;;;;;;;;kCAExI,6LAAC;wBAAM,WAAU;;4BAAkD;0CAEjE,6LAAC;gCAAM,OAAO,KAAK,MAAM,GAAG,KAAK,MAAM,GAAG;gCAAI,UAAU;gCAAc,MAAK;gCAAS,IAAG;gCAAS,MAAK;gCAAO,WAAU;;;;;;;;;;;;kCAExH,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAO,WAAU;sCAA8F;;;;;;;;;;;;;;;;;;;;;;;AAO1H;GAjEM;;QAC8B,iJAAA,CAAA,aAAU;;;KADxC;uCAmES","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/HTML%2C%20CSS%2C%20JS/Projects/Nextjs%20Project%201%20-%20GetMeAChai/get-me-a-chai/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// Since we're using the Edge build of Flight client for SSR [1], here we need to\n// also use the same Edge build to create the reference. For the client bundle,\n// we use the default and let Webpack to resolve it to the correct version.\n// 1: https://github.com/vercel/next.js/blob/16eb80b0b0be13f04a6407943664b5efd8f3d7d0/packages/next/src/server/app-render/use-flight-response.tsx#L24-L26\nexport const createServerReference = (\n  (!!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')) as typeof import('react-server-dom-webpack/client')\n).createServerReference\n"],"names":["callServer","createServerReference","findSourceMapURL","process","env","NEXT_RUNTIME","require"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;AAYrBG,QAAQC,GAAG,CAACC,YAAY,GAEvBC,QAAQ,0CAERA,QAAQ;;;;;;;;;;;;;;;;;IAdLN,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IASNC,qBAAqB,EAAA;eAArBA;;IARJC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;AAQ1B,MAAMD,wBACV,CAAA,CAAC,+MAI2C,EAC7CA,qBAAqB","ignoreList":[0],"debugId":null}}]
}