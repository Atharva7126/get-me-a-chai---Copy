{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/HTML%2C%20CSS%2C%20JS/Projects/Nextjs%20Project%201%20-%20GetMeAChai/get-me-a-chai/actions/useractions.js"],"sourcesContent":["\"use server\"\r\nimport Razorpay from \"razorpay\"\r\nimport Payment from \"@/models/Payment\"\r\nimport connectDB from \"@/db/connectDb\"\r\nimport User from \"@/models/User\"\r\n\r\nexport const initiatePayment = async (amount, to_username, paymentform) => {\r\n    await connectDB()\r\n    const instance = new Razorpay({\r\n        key_id: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID,\r\n        key_secret: process.env.RAZORPAY_SERET_KEY,\r\n    })\r\n\r\n    let options = {\r\n        amount: Number.parseInt(amount),\r\n        currency: \"INR\",\r\n    }\r\n\r\n    let order = await instance.orders.create(options)\r\n    await Payment.create({\r\n        amount: amount / 100,\r\n        order_id: order.id,\r\n        to_user: to_username,\r\n        name: paymentform.name,\r\n        message: paymentform.message,\r\n    })\r\n\r\n    return order\r\n}\r\n\r\nexport const fetchuser = async (username) => {\r\n    await connectDB()\r\n    const user = await User.findOne({ username:username }).lean() \r\n    if (!user) return null\r\n    return {\r\n        ...user,\r\n        _id: user._id.toString(),\r\n        createdAt: user.createdAt?.toISOString(),\r\n        updatedAt: user.updatedAt?.toISOString()\r\n    }\r\n}\r\n\r\nexport const fetchPayments = async (username) => {\r\n    await connectDB()\r\n    let payments = await Payment.find({ to_user: username }).sort({ amount: -1 }).lean()\r\n    return payments.map(p => ({\r\n        ...p,\r\n        _id: p._id.toString(),\r\n        createdAt: p.createdAt?.toISOString(),\r\n        updatedAt: p.updatedAt?.toISOString()\r\n    }))\r\n}"],"names":[],"mappings":";;;;;;IAMa,kBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/HTML%2C%20CSS%2C%20JS/Projects/Nextjs%20Project%201%20-%20GetMeAChai/get-me-a-chai/actions/useractions.js"],"sourcesContent":["\"use server\"\r\nimport Razorpay from \"razorpay\"\r\nimport Payment from \"@/models/Payment\"\r\nimport connectDB from \"@/db/connectDb\"\r\nimport User from \"@/models/User\"\r\n\r\nexport const initiatePayment = async (amount, to_username, paymentform) => {\r\n    await connectDB()\r\n    const instance = new Razorpay({\r\n        key_id: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID,\r\n        key_secret: process.env.RAZORPAY_SERET_KEY,\r\n    })\r\n\r\n    let options = {\r\n        amount: Number.parseInt(amount),\r\n        currency: \"INR\",\r\n    }\r\n\r\n    let order = await instance.orders.create(options)\r\n    await Payment.create({\r\n        amount: amount / 100,\r\n        order_id: order.id,\r\n        to_user: to_username,\r\n        name: paymentform.name,\r\n        message: paymentform.message,\r\n    })\r\n\r\n    return order\r\n}\r\n\r\nexport const fetchuser = async (username) => {\r\n    await connectDB()\r\n    const user = await User.findOne({ username:username }).lean() \r\n    if (!user) return null\r\n    return {\r\n        ...user,\r\n        _id: user._id.toString(),\r\n        createdAt: user.createdAt?.toISOString(),\r\n        updatedAt: user.updatedAt?.toISOString()\r\n    }\r\n}\r\n\r\nexport const fetchPayments = async (username) => {\r\n    await connectDB()\r\n    let payments = await Payment.find({ to_user: username }).sort({ amount: -1 }).lean()\r\n    return payments.map(p => ({\r\n        ...p,\r\n        _id: p._id.toString(),\r\n        createdAt: p.createdAt?.toISOString(),\r\n        updatedAt: p.updatedAt?.toISOString()\r\n    }))\r\n}"],"names":[],"mappings":";;;;;;IA0Ca,gBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/HTML%2C%20CSS%2C%20JS/Projects/Nextjs%20Project%201%20-%20GetMeAChai/get-me-a-chai/actions/useractions.js"],"sourcesContent":["\"use server\"\r\nimport Razorpay from \"razorpay\"\r\nimport Payment from \"@/models/Payment\"\r\nimport connectDB from \"@/db/connectDb\"\r\nimport User from \"@/models/User\"\r\n\r\nexport const initiatePayment = async (amount, to_username, paymentform) => {\r\n    await connectDB()\r\n    const instance = new Razorpay({\r\n        key_id: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID,\r\n        key_secret: process.env.RAZORPAY_SERET_KEY,\r\n    })\r\n\r\n    let options = {\r\n        amount: Number.parseInt(amount),\r\n        currency: \"INR\",\r\n    }\r\n\r\n    let order = await instance.orders.create(options)\r\n    await Payment.create({\r\n        amount: amount / 100,\r\n        order_id: order.id,\r\n        to_user: to_username,\r\n        name: paymentform.name,\r\n        message: paymentform.message,\r\n    })\r\n\r\n    return order\r\n}\r\n\r\nexport const fetchuser = async (username) => {\r\n    await connectDB()\r\n    const user = await User.findOne({ username:username }).lean() \r\n    if (!user) return null\r\n    return {\r\n        ...user,\r\n        _id: user._id.toString(),\r\n        createdAt: user.createdAt?.toISOString(),\r\n        updatedAt: user.updatedAt?.toISOString()\r\n    }\r\n}\r\n\r\nexport const fetchPayments = async (username) => {\r\n    await connectDB()\r\n    let payments = await Payment.find({ to_user: username }).sort({ amount: -1 }).lean()\r\n    return payments.map(p => ({\r\n        ...p,\r\n        _id: p._id.toString(),\r\n        createdAt: p.createdAt?.toISOString(),\r\n        updatedAt: p.updatedAt?.toISOString()\r\n    }))\r\n}"],"names":[],"mappings":";;;;;;IA8Ba,YAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/Desktop/HTML%2C%20CSS%2C%20JS/Projects/Nextjs%20Project%201%20-%20GetMeAChai/get-me-a-chai/components/PaymentsPage.js"],"sourcesContent":["\"use client\"\r\nimport { React, useEffect, useState } from 'react'\r\nimport Script from 'next/script'\r\nimport { initiatePayment, fetchPayments, fetchuser } from '@/actions/useractions'\r\nimport { useSession } from 'next-auth/react'\r\nimport { set } from 'mongoose'\r\n\r\nconst PaymentPage = ({ username }) => {\r\n    const { data: session } = useSession()\r\n    const [paymentform, setPaymentform] = useState({ name: \"\", message: \"\", amount: \"\" })\r\n    const [currentuser, setCurrentuser] = useState({})\r\n    const [payments, setPayments] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    const handleChange = (e) => {\r\n        setPaymentform({ ...paymentform, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const getData = async () => {\r\n        setLoading(true)\r\n        const [u, p] = await Promise.all([\r\n            fetchuser(username),\r\n            fetchPayments(username)\r\n        ])\r\n        setCurrentuser(u)\r\n        setPayments(p)\r\n        setLoading(false)\r\n    }\r\n\r\n    const pay = async (amount) => {\r\n        let a = await initiatePayment(amount, username, paymentform)\r\n        let orderId = a.id\r\n        var options = {\r\n            \"key\": process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID, // Enter the Key ID generated from the Dashboard\r\n            \"amount\": amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\r\n            \"currency\": \"INR\",\r\n            \"name\": \"GetMeAChai\", //your business name\r\n            \"description\": \"Test Transaction\",\r\n            \"image\": \"/public/tea.gif\", //This is the logo that will be displayed on the payment page\r\n            \"order_id\": orderId, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\r\n            \"callback_url\": `${process.env.NEXT_PUBLIC_URL}/api/razorpay`,\r\n            \"prefill\": { //We recommend using the prefill parameter to auto-fill customer's contact information especially their phone number\r\n                \"name\": \"Gaurav Kumar\", //your customer's name\r\n                \"email\": \"gaurav.kumar@example.com\",\r\n                \"contact\": \"9000090000\" //Provide the customer's phone number for better conversion rates \r\n            },\r\n            \"notes\": {\r\n                \"address\": \"Razorpay Corporate Office\"\r\n            },\r\n            \"theme\": {\r\n                \"color\": \"#3399cc\"\r\n            }\r\n        }\r\n        var rzp1 = new Razorpay(options);\r\n        rzp1.open();\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Script src=\"https://checkout.razorpay.com/v1/checkout.js\"></Script>\r\n\r\n            <style jsx>{`\r\n                /* Custom scrollbar styles for supporters list */\r\n                .supporters ul::-webkit-scrollbar {\r\n                    width: 0px;\r\n                    background-color: #1e293b;\r\n                }\r\n                .supporters ul::-webkit-scrollbar-thumb {\r\n                    background-color: #334155;\r\n                    border-radius: 8px;\r\n                }\r\n                .supporters ul::-webkit-scrollbar-track {\r\n                    background-color: #0f172a;\r\n                }\r\n                /* For Firefox */\r\n                \r\n            `}</style>\r\n\r\n            <div className='relative'>\r\n                <img\r\n                    className='w-full'\r\n                    src=\"https://c10.patreonusercontent.com/4/patreon-media/p/campaign/4842667/452146dcfeb04f38853368f554aadde1/eyJ3IjoxNjAwLCJ3ZSI6MX0%3D/18.gif?token-hash=PII8uE5d9cF__tMhhAsgUcejp0XUEAo4wDFfuH2yPbs%3D&token-time=1748995200\"\r\n                    alt=\"Banner\"\r\n                />\r\n                <div className='absolute -bottom-14 right-1/2 translate-x-1/2'>\r\n                    <img\r\n                        className='rounded-2xl border border-white'\r\n                        width={120}\r\n                        src=\"https://c10.patreonusercontent.com/4/patreon-media/p/campaign/4842667/aa52624d1cef47ba91c357da4a7859cf/eyJoIjozNjAsInciOjM2MH0%3D/4.gif?token-hash=M6CvxAOttRDDW8ZVVD9DQgliMzWYM_bzNTjZBNbFO54%3D&token-time=1748822400\"\r\n                        alt=\"Profile\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"info flex flex-col justify-center items-center my-18 gap-1\">\r\n                <div className='font-bold text-2xl'>\r\n                    @{username}\r\n                </div>\r\n                <div className='text-slate-300'>\r\n                    Creating Animated art for VTT&apos;s\r\n                </div>\r\n                <div className='text-slate-300'>\r\n                    18,101 members • 98 posts • $17,690/release\r\n                </div>\r\n                <div className=\"payments flex flex-col md:flex-row gap-3 w-full md:w-[80%] my-12\">\r\n                    <div className=\"supporters w-full md:w-1/2 bg-slate-900 rounded-lg p-4\">\r\n                        <h2 className='text-2xl font-bold'>Supporters</h2>\r\n                        <ul className='my-3 mx-3 max-h-[230px] overflow-y-auto'>\r\n                            {loading ? (<li className='text-slate-400'>Loading...</li>) :\r\n                                payments && payments.length > 0 ? (\r\n                                    payments.map((payment, index) => (\r\n                                        <li key={index} className='my-1 flex items-center gap-2'>\r\n                                            <img width={36} src=\"./avatar.gif\" alt=\"\" />\r\n                                            <span>{payment.name} donated <span className='font-bold'>₹{payment.amount}</span> with a message \"{payment.message}\"</span>\r\n                                        </li>\r\n                                    ))\r\n                                ) : (\r\n                                    <li className='text-slate-400'>No messages</li>\r\n                                )}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"flex makePayments w-full md:w-1/2 bg-slate-900 rounded-lg p-4 flex-col\">\r\n                        <h2 className='text-2xl font-bold mb-2'>Make a Payment</h2>\r\n                        <div className=\"flex flex-col gap-2 pt-1\">\r\n                            {/* input for name and message */}\r\n                            <input\r\n                                onChange={handleChange}\r\n                                value={paymentform.name}\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                className=\"p-2 rounded border border-slate-700 bg-slate-800 text-white flex-1\"\r\n                                placeholder=\"Enter your name\" />\r\n\r\n                            <input\r\n                                onChange={handleChange}\r\n                                value={paymentform.message}\r\n                                type=\"text\"\r\n                                name=\"message\"\r\n                                className=\"p-2 rounded border border-slate-700 bg-slate-800 text-white flex-1\"\r\n                                placeholder=\"Enter your message\" />\r\n\r\n                            <input\r\n                                onChange={handleChange}\r\n                                value={paymentform.amount}\r\n                                type=\"text\"\r\n                                name=\"amount\"\r\n                                className=\"p-2 rounded border border-slate-700 bg-slate-800 text-white flex-1\"\r\n                                placeholder=\"Enter amount\"\r\n                            />\r\n                            <button onClick={() => pay(paymentform.amount * 100)} className=\"bg-blue-600 cursor-pointer text-white rounded py-1 px-3 hover:bg-blue-700 transition\">\r\n                                Pay\r\n                            </button>\r\n\r\n                        </div>\r\n                        {/* Or choose from this amount */}\r\n                        <div className=\"flex gap-2 pt-2\">\r\n                            <button onClick={() => pay(500)} className=\"bg-slate-700 cursor-pointer text-white rounded py-2 px-3 hover:bg-slate-600 transition\">\r\n                                Pay ₹5\r\n                            </button>\r\n                            <button onClick={() => pay(1000)} className=\"bg-slate-700 cursor-pointer text-white rounded py-2 px-3 hover:bg-slate-600 transition\">\r\n                                Pay ₹10\r\n                            </button>\r\n                            <button onClick={() => pay(2000)} className=\"bg-slate-700 cursor-pointer text-white rounded py-2 px-3 hover:bg-slate-600 transition\">\r\n                                Pay ₹20\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PaymentPage\r\n"],"names":[],"mappings":"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","debugId":null}}]
}